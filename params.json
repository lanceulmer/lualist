{"name":"Lualist","body":"# lualist\r\nA simple wrapper for lua's built-in tables.\r\nlualist is a complete port of [Jaylist](https://github.com/benbscholz/jaylist) in lua.\r\nJaylist's functionality was inspired by Python's dictionary.\r\n\r\n## demo\r\n\r\n        local list = require('lualist')\r\n\r\n        local lualist = list()\r\n\r\n        -- and add some items\r\n        lualist.add(\"here\", \"strings\")\r\n        lualist.add(\"there\", 1638423)\r\n        lualist.add(\"these\", {1,2,3,4,5})\r\n\r\n        -- let's view the keys in the list\r\n        -- -> [\"here\", \"there\", \"these\"]\r\n        for k,v in pairs(lualist.keys()) do print(v) end\r\n\r\n        -- let's view the values in the list\r\n        -- -> [\"strings\", 1638423, [1,2,3,4,5]]\r\n        for k,v in pairs(lualist.values()) do print(v) end\r\n\r\n        -- let's remove an item\r\n        lualist.remove(\"here\")\r\n\r\n        -- trying to retrieve an item that doesn't exist yields undefined\r\n        -- -> undefined\r\n        print(lualist.get(\"here\"))\r\n\r\n        -- -> 1638423\r\n        print(lualist.get(\"there\"))\r\n\r\n        -- deep copy a list\r\n        local beelist = lualist.copy()\r\n\r\n        -- list equality\r\n        -- -> true\r\n        print(lualist.isEqual(beelist))\r\n\r\n        -- empty a list\r\n        lualist.clear()\r\n\r\n        -- iteration with a callback\r\n        beelist.each(function(key) print(key) end)\r\n\r\n        -- iteration with a loop\r\n        local item = beelist.next()\r\n        while item do\r\n            print(item)\r\n            item = beelist.next()\r\n        end\r\n\r\n        -- update a list with the contents of another\r\n        lualist.update(beelist)\r\n\r\n## Functions:\r\n###Create the list:\r\n\r\n    local lualist = list()\r\n\r\n\r\n###Add a value to the list:\r\n\r\n#### add(key, value)\r\n--Insert an object into the list, overwriting any value already assigned to the key. Returns the value upon successful addition.\r\n\r\n    lualist.add(\"key\", value)\r\n\r\n\r\n###Get the value from the list:\r\n\r\n#### get(key)\r\n--Returns the value associated with key, undefined if the key has not been entered into the list.\r\n\r\n    local val = lualist.get(\"key\")\r\n\r\n\r\n###Remove the value from the list:\r\n\r\n#### remove(key)\r\n--Removes the object from the list. Returns undefined if no value is assigned to the key. Upon successful removal, it returns the value removed. A list or array of keys may also be passed.\r\n\r\n    lualist.remove(\"key\")\r\n\r\n\r\n###Get the keys in the list:\r\n\r\n#### keys()\r\n--Returns an array of the keys in the list.\r\n\r\n    local keys = lualist.keys()\r\n\r\n\r\n###Get the values in the list:\r\n\r\n#### values()\r\n--Returns an array of the values in the list.\r\n\r\n    local values = lualist.values()\r\n\r\n\r\n###Get the items in the list:\r\n\r\n#### items()\r\n--Returns an array of key-value pairs. [[key, value]]\r\n\r\n    local items = lualist.items()\r\n\r\n\r\n###Get the length of the list:\r\n\r\n#### len()\r\n--Returns the number of elements in the list, 0 when empty.\r\n\r\n    len = lualist.len()\r\n\r\n\r\n###Clear the list:\r\n\r\n#### clear()\r\n--Removes all the items from the list.\r\n\r\n    lualist.clear()\r\n\r\n\r\n###Check if the list contains the key:\r\n\r\n#### hasKey(key)\r\n-- Returns true if the list contains the key and false otherwise.\r\n\r\n    lualist.hasKey(key)\r\n\r\n\r\n###Update a list with another list:\r\n\r\n#### update(list)\r\n-- Adds the entries of the input list to the list.\r\n\r\n    lualist.update(somelist)\r\n\r\n\r\n###Deep copy a list:\r\n\r\n#### copy()\r\n-- Returns a deep copy of the list.\r\n\r\n    local newlist = lualist.copy()\r\n\r\n\r\n###Iterate through a list:\r\n\r\n#### each(callback)\r\n-- Iterates through each entry in the list, calling callback with parameter key for each value.\r\n\r\n    lualist.each(function(key)somefunction(key)end)\r\n\r\n\r\n###Iterate through a list:\r\n\r\n#### next()\r\n-- Iterates through each entry in the list, returning a key on each call. When the iteration is complete, next() returns undefined & the iteration can begin again.\r\n\r\n    while(lualist.next()) {...}\r\n\r\n\r\n###Return an object representation of the list:\r\n\r\n#### object()\r\n-- Returns the list as an object of key-value pairs.\r\n\r\n    local obj = lualist.object()\r\n\r\n\r\n###Check if two lists are equal:\r\n\r\n#### isEqual(list)\r\n-- Returns true if the lists are equivalent and false otherwise.\r\n\r\n    lualist.isEqual(alist)\r\n\r\n\r\n","tagline":"lualist is a very simple key-value list. (ported from jaylist)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}